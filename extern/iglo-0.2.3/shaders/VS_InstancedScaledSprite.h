#ifdef IGLO_VULKAN

#if 0
; SPIR-V
; Version: 1.0
; Generator: Google spiregg; 0
; Bound: 96
; Schema: 0
               OpCapability Shader
               OpCapability RuntimeDescriptorArray
               OpExtension "SPV_EXT_descriptor_indexing"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Vertex %VSMain "VSMain" %in_var_POSITION %in_var_WIDTH %in_var_HEIGHT %in_var_TEXCOORD0 %in_var_COLOR %gl_VertexIndex %gl_Position %out_var_COLOR %out_var_TEXCOORD0
               OpSource HLSL 660
               OpName %type_ConstantBuffer_PushConstants "type.ConstantBuffer.PushConstants"
               OpMemberName %type_ConstantBuffer_PushConstants 0 "textureIndex"
               OpMemberName %type_ConstantBuffer_PushConstants 1 "stencilComponentTextureIndex"
               OpMemberName %type_ConstantBuffer_PushConstants 2 "samplerIndex"
               OpMemberName %type_ConstantBuffer_PushConstants 3 "worldMatrixIndex"
               OpMemberName %type_ConstantBuffer_PushConstants 4 "viewProjMatrixIndex"
               OpMemberName %type_ConstantBuffer_PushConstants 5 "textureConstantsIndex"
               OpMemberName %type_ConstantBuffer_PushConstants 6 "renderConstantsIndex"
               OpMemberName %type_ConstantBuffer_PushConstants 7 "rawOrStructuredBufferIndex"
               OpName %pushConstants "pushConstants"
               OpName %in_var_POSITION "in.var.POSITION"
               OpName %in_var_WIDTH "in.var.WIDTH"
               OpName %in_var_HEIGHT "in.var.HEIGHT"
               OpName %in_var_TEXCOORD0 "in.var.TEXCOORD0"
               OpName %in_var_COLOR "in.var.COLOR"
               OpName %out_var_COLOR "out.var.COLOR"
               OpName %out_var_TEXCOORD0 "out.var.TEXCOORD0"
               OpName %type_ConstantBuffer_MatrixConstant "type.ConstantBuffer.MatrixConstant"
               OpMemberName %type_ConstantBuffer_MatrixConstant 0 "m"
               OpName %ResourceDescriptorHeap "ResourceDescriptorHeap"
               OpName %ResourceDescriptorHeap_0 "ResourceDescriptorHeap"
               OpName %type_ConstantBuffer_TextureConstants "type.ConstantBuffer.TextureConstants"
               OpMemberName %type_ConstantBuffer_TextureConstants 0 "textureSize"
               OpMemberName %type_ConstantBuffer_TextureConstants 1 "inverseTextureSize"
               OpMemberName %type_ConstantBuffer_TextureConstants 2 "msaa"
               OpName %ResourceDescriptorHeap_1 "ResourceDescriptorHeap"
               OpName %VSMain "VSMain"
               OpDecorate %gl_VertexIndex BuiltIn VertexIndex
               OpDecorate %gl_Position BuiltIn Position
               OpDecorate %in_var_POSITION Location 0
               OpDecorate %in_var_WIDTH Location 1
               OpDecorate %in_var_HEIGHT Location 2
               OpDecorate %in_var_TEXCOORD0 Location 3
               OpDecorate %in_var_COLOR Location 4
               OpDecorate %out_var_COLOR Location 0
               OpDecorate %out_var_TEXCOORD0 Location 1
               OpDecorate %pushConstants DescriptorSet 0
               OpDecorate %pushConstants Binding 0
               OpDecorate %ResourceDescriptorHeap DescriptorSet 0
               OpDecorate %ResourceDescriptorHeap Binding 1
               OpDecorate %ResourceDescriptorHeap_0 DescriptorSet 0
               OpDecorate %ResourceDescriptorHeap_0 Binding 1
               OpDecorate %ResourceDescriptorHeap_1 DescriptorSet 0
               OpDecorate %ResourceDescriptorHeap_1 Binding 1
               OpMemberDecorate %type_ConstantBuffer_PushConstants 0 Offset 0
               OpMemberDecorate %type_ConstantBuffer_PushConstants 1 Offset 4
               OpMemberDecorate %type_ConstantBuffer_PushConstants 2 Offset 8
               OpMemberDecorate %type_ConstantBuffer_PushConstants 3 Offset 12
               OpMemberDecorate %type_ConstantBuffer_PushConstants 4 Offset 16
               OpMemberDecorate %type_ConstantBuffer_PushConstants 5 Offset 20
               OpMemberDecorate %type_ConstantBuffer_PushConstants 6 Offset 24
               OpMemberDecorate %type_ConstantBuffer_PushConstants 7 Offset 28
               OpDecorate %type_ConstantBuffer_PushConstants Block
               OpMemberDecorate %type_ConstantBuffer_MatrixConstant 0 Offset 0
               OpMemberDecorate %type_ConstantBuffer_MatrixConstant 0 MatrixStride 16
               OpMemberDecorate %type_ConstantBuffer_MatrixConstant 0 RowMajor
               OpDecorate %type_ConstantBuffer_MatrixConstant Block
               OpMemberDecorate %type_ConstantBuffer_TextureConstants 0 Offset 0
               OpMemberDecorate %type_ConstantBuffer_TextureConstants 1 Offset 8
               OpMemberDecorate %type_ConstantBuffer_TextureConstants 2 Offset 16
               OpDecorate %type_ConstantBuffer_TextureConstants Block
        %int = OpTypeInt 32 1
      %int_3 = OpConstant %int 3
      %int_4 = OpConstant %int 4
      %int_5 = OpConstant %int 5
      %float = OpTypeFloat 32
    %float_0 = OpConstant %float 0
    %float_1 = OpConstant %float 1
       %uint = OpTypeInt 32 0
%type_ConstantBuffer_PushConstants = OpTypeStruct %uint %uint %uint %uint %uint %uint %uint %uint
%_ptr_Uniform_type_ConstantBuffer_PushConstants = OpTypePointer Uniform %type_ConstantBuffer_PushConstants
    %v2float = OpTypeVector %float 2
%_ptr_Input_v2float = OpTypePointer Input %v2float
%_ptr_Input_float = OpTypePointer Input %float
    %v4float = OpTypeVector %float 4
%_ptr_Input_v4float = OpTypePointer Input %v4float
%_ptr_Input_uint = OpTypePointer Input %uint
%_ptr_Output_v4float = OpTypePointer Output %v4float
%_ptr_Output_v2float = OpTypePointer Output %v2float
%mat4v4float = OpTypeMatrix %v4float 4
%type_ConstantBuffer_MatrixConstant = OpTypeStruct %mat4v4float
%_runtimearr_type_ConstantBuffer_MatrixConstant = OpTypeRuntimeArray %type_ConstantBuffer_MatrixConstant
%_ptr_Uniform__runtimearr_type_ConstantBuffer_MatrixConstant = OpTypePointer Uniform %_runtimearr_type_ConstantBuffer_MatrixConstant
%type_ConstantBuffer_TextureConstants = OpTypeStruct %v2float %v2float %uint
%_runtimearr_type_ConstantBuffer_TextureConstants = OpTypeRuntimeArray %type_ConstantBuffer_TextureConstants
%_ptr_Uniform__runtimearr_type_ConstantBuffer_TextureConstants = OpTypePointer Uniform %_runtimearr_type_ConstantBuffer_TextureConstants
       %void = OpTypeVoid
         %41 = OpTypeFunction %void
%_ptr_Function_v2float = OpTypePointer Function %v2float
     %uint_4 = OpConstant %uint 4
%_arr_v2float_uint_4 = OpTypeArray %v2float %uint_4
%_ptr_Function__arr_v2float_uint_4 = OpTypePointer Function %_arr_v2float_uint_4
%_ptr_Uniform_uint = OpTypePointer Uniform %uint
%_ptr_Uniform_type_ConstantBuffer_MatrixConstant = OpTypePointer Uniform %type_ConstantBuffer_MatrixConstant
%_ptr_Uniform_type_ConstantBuffer_TextureConstants = OpTypePointer Uniform %type_ConstantBuffer_TextureConstants
%pushConstants = OpVariable %_ptr_Uniform_type_ConstantBuffer_PushConstants Uniform
%in_var_POSITION = OpVariable %_ptr_Input_v2float Input
%in_var_WIDTH = OpVariable %_ptr_Input_float Input
%in_var_HEIGHT = OpVariable %_ptr_Input_float Input
%in_var_TEXCOORD0 = OpVariable %_ptr_Input_v4float Input
%in_var_COLOR = OpVariable %_ptr_Input_v4float Input
%gl_VertexIndex = OpVariable %_ptr_Input_uint Input
%gl_Position = OpVariable %_ptr_Output_v4float Output
%out_var_COLOR = OpVariable %_ptr_Output_v4float Output
%out_var_TEXCOORD0 = OpVariable %_ptr_Output_v2float Output
%ResourceDescriptorHeap = OpVariable %_ptr_Uniform__runtimearr_type_ConstantBuffer_MatrixConstant Uniform
%ResourceDescriptorHeap_0 = OpVariable %_ptr_Uniform__runtimearr_type_ConstantBuffer_MatrixConstant Uniform
%ResourceDescriptorHeap_1 = OpVariable %_ptr_Uniform__runtimearr_type_ConstantBuffer_TextureConstants Uniform
         %49 = OpConstantComposite %v2float %float_0 %float_0
%_ptr_Uniform_v2float = OpTypePointer Uniform %v2float
     %uint_1 = OpConstant %uint 1
     %VSMain = OpFunction %void None %41
         %52 = OpLabel
         %53 = OpVariable %_ptr_Function__arr_v2float_uint_4 Function
         %54 = OpVariable %_ptr_Function__arr_v2float_uint_4 Function
         %55 = OpLoad %v2float %in_var_POSITION
         %56 = OpLoad %float %in_var_WIDTH
         %57 = OpLoad %float %in_var_HEIGHT
         %58 = OpLoad %v4float %in_var_TEXCOORD0
         %59 = OpLoad %v4float %in_var_COLOR
         %60 = OpLoad %uint %gl_VertexIndex
         %61 = OpAccessChain %_ptr_Uniform_uint %pushConstants %int_3
         %62 = OpLoad %uint %61
         %63 = OpAccessChain %_ptr_Uniform_type_ConstantBuffer_MatrixConstant %ResourceDescriptorHeap %62
         %64 = OpLoad %type_ConstantBuffer_MatrixConstant %63
         %65 = OpAccessChain %_ptr_Uniform_uint %pushConstants %int_4
         %66 = OpLoad %uint %65
         %67 = OpAccessChain %_ptr_Uniform_type_ConstantBuffer_MatrixConstant %ResourceDescriptorHeap_0 %66
         %68 = OpLoad %type_ConstantBuffer_MatrixConstant %67
         %69 = OpAccessChain %_ptr_Uniform_uint %pushConstants %int_5
         %70 = OpLoad %uint %69
         %71 = OpAccessChain %_ptr_Uniform_type_ConstantBuffer_TextureConstants %ResourceDescriptorHeap_1 %70
         %72 = OpAccessChain %_ptr_Uniform_v2float %71 %uint_1
         %73 = OpLoad %v2float %72
         %74 = OpCompositeConstruct %v2float %56 %float_0
         %75 = OpCompositeConstruct %v2float %float_0 %57
         %76 = OpCompositeConstruct %v2float %56 %57
         %77 = OpCompositeConstruct %_arr_v2float_uint_4 %49 %74 %75 %76
               OpStore %53 %77
         %78 = OpVectorShuffle %v2float %58 %58 0 1
         %79 = OpVectorShuffle %v2float %58 %58 2 1
         %80 = OpVectorShuffle %v2float %58 %58 0 3
         %81 = OpVectorShuffle %v2float %58 %58 2 3
         %82 = OpCompositeConstruct %_arr_v2float_uint_4 %78 %79 %80 %81
               OpStore %54 %82
         %83 = OpAccessChain %_ptr_Function_v2float %53 %60
         %84 = OpLoad %v2float %83
         %85 = OpFAdd %v2float %55 %84
         %86 = OpCompositeExtract %float %85 0
         %87 = OpCompositeExtract %float %85 1
         %88 = OpCompositeConstruct %v4float %86 %87 %float_0 %float_1
         %89 = OpCompositeExtract %mat4v4float %64 0
         %90 = OpMatrixTimesVector %v4float %89 %88
         %91 = OpCompositeExtract %mat4v4float %68 0
         %92 = OpMatrixTimesVector %v4float %91 %90
         %93 = OpAccessChain %_ptr_Function_v2float %54 %60
         %94 = OpLoad %v2float %93
         %95 = OpFMul %v2float %94 %73
               OpStore %gl_Position %92
               OpStore %out_var_COLOR %59
               OpStore %out_var_TEXCOORD0 %95
               OpReturn
               OpFunctionEnd

#endif

const unsigned char g_VS_InstancedScaledSprite[] = {
  0x03, 0x02, 0x23, 0x07, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0e, 0x00,
  0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, 0x00, 0xb6, 0x14, 0x00, 0x00,
  0x0a, 0x00, 0x08, 0x00, 0x53, 0x50, 0x56, 0x5f, 0x45, 0x58, 0x54, 0x5f,
  0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x69,
  0x6e, 0x64, 0x65, 0x78, 0x69, 0x6e, 0x67, 0x00, 0x0e, 0x00, 0x03, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x0e, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, 0x53, 0x4d, 0x61,
  0x69, 0x6e, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
  0x0a, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x94, 0x02, 0x00, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x0b, 0x00, 0x00, 0x00,
  0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e,
  0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x75, 0x73, 0x68,
  0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x00, 0x00, 0x00,
  0x06, 0x00, 0x07, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
  0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x0b, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x69, 0x6c, 0x43,
  0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x78, 0x74,
  0x75, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x00, 0x00, 0x00, 0x00,
  0x06, 0x00, 0x07, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78,
  0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x0b, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x4d, 0x61, 0x74,
  0x72, 0x69, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x00, 0x00, 0x00, 0x00,
  0x06, 0x00, 0x08, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x4d, 0x61, 0x74, 0x72,
  0x69, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x00, 0x06, 0x00, 0x09, 0x00,
  0x0b, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x74,
  0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73,
  0x49, 0x6e, 0x64, 0x65, 0x78, 0x00, 0x00, 0x00, 0x06, 0x00, 0x09, 0x00,
  0x0b, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x72, 0x65, 0x6e, 0x64,
  0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x49,
  0x6e, 0x64, 0x65, 0x78, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x0a, 0x00,
  0x0b, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x72, 0x61, 0x77, 0x4f,
  0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x42,
  0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x00, 0x00,
  0x05, 0x00, 0x06, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x70, 0x75, 0x73, 0x68,
  0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x06, 0x00, 0x02, 0x00, 0x00, 0x00, 0x69, 0x6e, 0x2e, 0x76,
  0x61, 0x72, 0x2e, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x00,
  0x05, 0x00, 0x06, 0x00, 0x03, 0x00, 0x00, 0x00, 0x69, 0x6e, 0x2e, 0x76,
  0x61, 0x72, 0x2e, 0x57, 0x49, 0x44, 0x54, 0x48, 0x00, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x06, 0x00, 0x04, 0x00, 0x00, 0x00, 0x69, 0x6e, 0x2e, 0x76,
  0x61, 0x72, 0x2e, 0x48, 0x45, 0x49, 0x47, 0x48, 0x54, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x07, 0x00, 0x05, 0x00, 0x00, 0x00, 0x69, 0x6e, 0x2e, 0x76,
  0x61, 0x72, 0x2e, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x30,
  0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x06, 0x00, 0x06, 0x00, 0x00, 0x00,
  0x69, 0x6e, 0x2e, 0x76, 0x61, 0x72, 0x2e, 0x43, 0x4f, 0x4c, 0x4f, 0x52,
  0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x06, 0x00, 0x09, 0x00, 0x00, 0x00,
  0x6f, 0x75, 0x74, 0x2e, 0x76, 0x61, 0x72, 0x2e, 0x43, 0x4f, 0x4c, 0x4f,
  0x52, 0x00, 0x00, 0x00, 0x05, 0x00, 0x07, 0x00, 0x0a, 0x00, 0x00, 0x00,
  0x6f, 0x75, 0x74, 0x2e, 0x76, 0x61, 0x72, 0x2e, 0x54, 0x45, 0x58, 0x43,
  0x4f, 0x4f, 0x52, 0x44, 0x30, 0x00, 0x00, 0x00, 0x05, 0x00, 0x0b, 0x00,
  0x0d, 0x00, 0x00, 0x00, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
  0x73, 0x74, 0x61, 0x6e, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
  0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61,
  0x6e, 0x74, 0x00, 0x00, 0x06, 0x00, 0x04, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x6d, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00,
  0x0e, 0x00, 0x00, 0x00, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
  0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x48, 0x65,
  0x61, 0x70, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63,
  0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x48, 0x65, 0x61, 0x70, 0x00, 0x00,
  0x05, 0x00, 0x0c, 0x00, 0x10, 0x00, 0x00, 0x00, 0x74, 0x79, 0x70, 0x65,
  0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x42, 0x75, 0x66,
  0x66, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43,
  0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x00, 0x00, 0x00, 0x00,
  0x06, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x00,
  0x06, 0x00, 0x08, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x54, 0x65, 0x78, 0x74, 0x75,
  0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x00, 0x00, 0x06, 0x00, 0x05, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x6d, 0x73, 0x61, 0x61,
  0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x11, 0x00, 0x00, 0x00,
  0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63,
  0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x48, 0x65, 0x61, 0x70, 0x00, 0x00,
  0x05, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, 0x53, 0x4d, 0x61,
  0x69, 0x6e, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x0b, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x47, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x1e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x47, 0x00, 0x04, 0x00, 0x05, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00,
  0x1e, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00,
  0x09, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x47, 0x00, 0x04, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x0c, 0x00, 0x00, 0x00,
  0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x47, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00,
  0x21, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x47, 0x00, 0x04, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x11, 0x00, 0x00, 0x00,
  0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00,
  0x11, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x48, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00,
  0x0b, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x48, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x23, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00,
  0x0b, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
  0x48, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
  0x23, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00,
  0x0b, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00,
  0x1c, 0x00, 0x00, 0x00, 0x47, 0x00, 0x03, 0x00, 0x0b, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x48, 0x00, 0x05, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x04, 0x00,
  0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x47, 0x00, 0x03, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x48, 0x00, 0x05, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x47, 0x00, 0x03, 0x00, 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x15, 0x00, 0x04, 0x00, 0x12, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x12, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00,
  0x12, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x2b, 0x00, 0x04, 0x00, 0x12, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x16, 0x00, 0x03, 0x00, 0x16, 0x00, 0x00, 0x00,
  0x20, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x16, 0x00, 0x00, 0x00,
  0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00,
  0x16, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f,
  0x15, 0x00, 0x04, 0x00, 0x19, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x0a, 0x00, 0x0b, 0x00, 0x00, 0x00,
  0x19, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00,
  0x19, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00,
  0x19, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00,
  0x1a, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00,
  0x17, 0x00, 0x04, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x1c, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00,
  0x1d, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00,
  0x17, 0x00, 0x04, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x1f, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00,
  0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00,
  0x20, 0x00, 0x04, 0x00, 0x21, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x1e, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x22, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x18, 0x00, 0x04, 0x00,
  0x23, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x1e, 0x00, 0x03, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00,
  0x1d, 0x00, 0x03, 0x00, 0x24, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x20, 0x00, 0x04, 0x00, 0x25, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x24, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x05, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x1b, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00,
  0x1d, 0x00, 0x03, 0x00, 0x26, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x20, 0x00, 0x04, 0x00, 0x27, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x26, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00, 0x28, 0x00, 0x00, 0x00,
  0x21, 0x00, 0x03, 0x00, 0x29, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
  0x20, 0x00, 0x04, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x1b, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x19, 0x00, 0x00, 0x00,
  0x2b, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x04, 0x00,
  0x2c, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00,
  0x20, 0x00, 0x04, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x2c, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x2e, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00,
  0x2f, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x20, 0x00, 0x04, 0x00, 0x30, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x1a, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00,
  0x1c, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x3b, 0x00, 0x04, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x1d, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00,
  0x1f, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x3b, 0x00, 0x04, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x20, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00,
  0x21, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x3b, 0x00, 0x04, 0x00, 0x21, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x22, 0x00, 0x00, 0x00,
  0x0a, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00,
  0x25, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x3b, 0x00, 0x04, 0x00, 0x25, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x27, 0x00, 0x00, 0x00,
  0x11, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x05, 0x00,
  0x1b, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00,
  0x17, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x32, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00,
  0x19, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x36, 0x00, 0x05, 0x00, 0x28, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00,
  0x34, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x2d, 0x00, 0x00, 0x00,
  0x35, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00,
  0x2d, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x3d, 0x00, 0x04, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x16, 0x00, 0x00, 0x00,
  0x38, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00,
  0x16, 0x00, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x3d, 0x00, 0x04, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x1e, 0x00, 0x00, 0x00,
  0x3b, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00,
  0x19, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x41, 0x00, 0x05, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00,
  0x19, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x00, 0x00,
  0x41, 0x00, 0x05, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00,
  0x0e, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00,
  0x0d, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00,
  0x41, 0x00, 0x05, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00,
  0x19, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00,
  0x41, 0x00, 0x05, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00,
  0x0d, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00,
  0x41, 0x00, 0x05, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00,
  0x19, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00,
  0x41, 0x00, 0x05, 0x00, 0x30, 0x00, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00,
  0x11, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00,
  0x32, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00,
  0x33, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x1b, 0x00, 0x00, 0x00,
  0x49, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00,
  0x1b, 0x00, 0x00, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
  0x17, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x1b, 0x00, 0x00, 0x00,
  0x4b, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x05, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00,
  0x38, 0x00, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00,
  0x2c, 0x00, 0x00, 0x00, 0x4d, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00,
  0x4a, 0x00, 0x00, 0x00, 0x4b, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00,
  0x3e, 0x00, 0x03, 0x00, 0x35, 0x00, 0x00, 0x00, 0x4d, 0x00, 0x00, 0x00,
  0x4f, 0x00, 0x07, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00,
  0x3a, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x07, 0x00, 0x1b, 0x00, 0x00, 0x00,
  0x4f, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x07, 0x00,
  0x1b, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x00,
  0x3a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x4f, 0x00, 0x07, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00,
  0x3a, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x2c, 0x00, 0x00, 0x00,
  0x52, 0x00, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00,
  0x36, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00,
  0x2a, 0x00, 0x00, 0x00, 0x53, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00,
  0x3c, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x1b, 0x00, 0x00, 0x00,
  0x54, 0x00, 0x00, 0x00, 0x53, 0x00, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00,
  0x1b, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00,
  0x54, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x16, 0x00, 0x00, 0x00,
  0x56, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x51, 0x00, 0x05, 0x00, 0x16, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00,
  0x55, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00,
  0x1e, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x56, 0x00, 0x00, 0x00,
  0x57, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x51, 0x00, 0x05, 0x00, 0x23, 0x00, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00,
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x91, 0x00, 0x05, 0x00,
  0x1e, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00,
  0x58, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x23, 0x00, 0x00, 0x00,
  0x5b, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x91, 0x00, 0x05, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00,
  0x5b, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00,
  0x2a, 0x00, 0x00, 0x00, 0x5d, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00,
  0x3c, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x1b, 0x00, 0x00, 0x00,
  0x5e, 0x00, 0x00, 0x00, 0x5d, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00,
  0x1b, 0x00, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x5e, 0x00, 0x00, 0x00,
  0x49, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x5c, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0x09, 0x00, 0x00, 0x00,
  0x3b, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0x0a, 0x00, 0x00, 0x00,
  0x5f, 0x00, 0x00, 0x00, 0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, 0x00
};

#else

#if 0
;
; Note: shader requires additional functionality:
;       Resource descriptor heap indexing
;
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; POSITION                 0   xy          0     NONE   float   xy  
; WIDTH                    0   x           1     NONE   float   x   
; HEIGHT                   0   x           2     NONE   float   x   
; TEXCOORD                 0   xyzw        3     NONE   float   xyzw
; COLOR                    0   xyzw        4     NONE   float   xyzw
; SV_VertexID              0   x           5   VERTID    uint   x   
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
; COLOR                    0   xyzw        1     NONE   float   xyzw
; TEXCOORD                 0   xy          2     NONE   float   xy  
;
; shader hash: 7ad099aeb5ff2f98ff3280506eae9621
;
; Pipeline Runtime Information: 
;
;PSVRuntimeInfo:
; Vertex Shader
; OutputPositionPresent=1
; MinimumExpectedWaveLaneCount: 0
; MaximumExpectedWaveLaneCount: 4294967295
; UsesViewID: false
; SigInputElements: 6
; SigOutputElements: 3
; SigPatchConstOrPrimElements: 0
; SigInputVectors: 6
; SigOutputVectors[0]: 3
; SigOutputVectors[1]: 0
; SigOutputVectors[2]: 0
; SigOutputVectors[3]: 0
; EntryFunctionName: VSMain
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; POSITION                 0                              
; WIDTH                    0                              
; HEIGHT                   0                              
; TEXCOORD                 0                              
; COLOR                    0                              
; SV_VertexID              0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; COLOR                    0                 linear       
; TEXCOORD                 0                 linear       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [32 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;
;
; ViewId state:
;
; Number of inputs: 21, outputs: 10
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 4, 8, 20 }
;   output 1 depends on inputs: { 0, 1, 4, 8, 20 }
;   output 2 depends on inputs: { 0, 1, 4, 8, 20 }
;   output 3 depends on inputs: { 0, 1, 4, 8, 20 }
;   output 4 depends on inputs: { 16 }
;   output 5 depends on inputs: { 17 }
;   output 6 depends on inputs: { 18 }
;   output 7 depends on inputs: { 19 }
;   output 8 depends on inputs: { 12, 14, 20 }
;   output 9 depends on inputs: { 13, 15, 20 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%pushConstants = type { %struct.PushConstants }
%struct.PushConstants = type { i32, i32, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #0

; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #0

define void @VSMain() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 13, i32 32 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %3 = call i32 @dx.op.loadInput.i32(i32 4, i32 5, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %4 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = alloca [4 x float], align 4
  %17 = alloca [4 x float], align 4
  %18 = alloca [4 x float], align 4
  %19 = alloca [4 x float], align 4
  %20 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %2, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %21 = extractvalue %dx.types.CBufRet.i32 %20, 3
  %22 = call %dx.types.Handle @dx.op.createHandleFromHeap(i32 218, i32 %21, i1 false, i1 false)  ; CreateHandleFromHeap(index,samplerHeap,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 13, i32 64 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %24 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %2, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %25 = extractvalue %dx.types.CBufRet.i32 %24, 0
  %26 = call %dx.types.Handle @dx.op.createHandleFromHeap(i32 218, i32 %25, i1 false, i1 false)  ; CreateHandleFromHeap(index,samplerHeap,nonUniformIndex)
  %27 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 13, i32 64 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %28 = extractvalue %dx.types.CBufRet.i32 %24, 1
  %29 = call %dx.types.Handle @dx.op.createHandleFromHeap(i32 218, i32 %28, i1 false, i1 false)  ; CreateHandleFromHeap(index,samplerHeap,nonUniformIndex)
  %30 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 13, i32 20 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %31 = bitcast [4 x float]* %18 to i8*
  call void @llvm.lifetime.start(i64 16, i8* %31) #0
  %32 = bitcast [4 x float]* %19 to i8*
  call void @llvm.lifetime.start(i64 16, i8* %32) #0
  %33 = getelementptr [4 x float], [4 x float]* %18, i32 0, i32 0
  %34 = getelementptr [4 x float], [4 x float]* %19, i32 0, i32 0
  store float 0.000000e+00, float* %33, align 4
  store float 0.000000e+00, float* %34, align 4
  %35 = getelementptr [4 x float], [4 x float]* %18, i32 0, i32 1
  %36 = getelementptr [4 x float], [4 x float]* %19, i32 0, i32 1
  store float %13, float* %35, align 4
  store float 0.000000e+00, float* %36, align 4
  %37 = getelementptr [4 x float], [4 x float]* %18, i32 0, i32 2
  %38 = getelementptr [4 x float], [4 x float]* %19, i32 0, i32 2
  store float 0.000000e+00, float* %37, align 4
  store float %12, float* %38, align 4
  %39 = getelementptr [4 x float], [4 x float]* %18, i32 0, i32 3
  %40 = getelementptr [4 x float], [4 x float]* %19, i32 0, i32 3
  store float %13, float* %39, align 4
  store float %12, float* %40, align 4
  %41 = bitcast [4 x float]* %16 to i8*
  call void @llvm.lifetime.start(i64 16, i8* %41) #0
  %42 = bitcast [4 x float]* %17 to i8*
  call void @llvm.lifetime.start(i64 16, i8* %42) #0
  %43 = getelementptr [4 x float], [4 x float]* %16, i32 0, i32 0
  %44 = getelementptr [4 x float], [4 x float]* %17, i32 0, i32 0
  store float %8, float* %43, align 4
  store float %9, float* %44, align 4
  %45 = getelementptr [4 x float], [4 x float]* %16, i32 0, i32 1
  %46 = getelementptr [4 x float], [4 x float]* %17, i32 0, i32 1
  store float %10, float* %45, align 4
  store float %9, float* %46, align 4
  %47 = getelementptr [4 x float], [4 x float]* %16, i32 0, i32 2
  %48 = getelementptr [4 x float], [4 x float]* %17, i32 0, i32 2
  store float %8, float* %47, align 4
  store float %11, float* %48, align 4
  %49 = getelementptr [4 x float], [4 x float]* %16, i32 0, i32 3
  %50 = getelementptr [4 x float], [4 x float]* %17, i32 0, i32 3
  store float %10, float* %49, align 4
  store float %11, float* %50, align 4
  %51 = getelementptr [4 x float], [4 x float]* %18, i32 0, i32 %3
  %52 = getelementptr [4 x float], [4 x float]* %19, i32 0, i32 %3
  %53 = load float, float* %51, align 4
  %54 = load float, float* %52, align 4
  %55 = fadd fast float %53, %14
  %56 = fadd fast float %54, %15
  %57 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %58 = extractvalue %dx.types.CBufRet.f32 %57, 0
  %59 = extractvalue %dx.types.CBufRet.f32 %57, 1
  %60 = extractvalue %dx.types.CBufRet.f32 %57, 3
  %61 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %62 = extractvalue %dx.types.CBufRet.f32 %61, 0
  %63 = extractvalue %dx.types.CBufRet.f32 %61, 1
  %64 = extractvalue %dx.types.CBufRet.f32 %61, 3
  %65 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %66 = extractvalue %dx.types.CBufRet.f32 %65, 0
  %67 = extractvalue %dx.types.CBufRet.f32 %65, 1
  %68 = extractvalue %dx.types.CBufRet.f32 %65, 3
  %69 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %70 = extractvalue %dx.types.CBufRet.f32 %69, 0
  %71 = extractvalue %dx.types.CBufRet.f32 %69, 1
  %72 = extractvalue %dx.types.CBufRet.f32 %69, 3
  %73 = fmul fast float %58, %55
  %74 = call float @dx.op.tertiary.f32(i32 46, float %56, float %59, float %73)  ; FMad(a,b,c)
  %75 = fadd fast float %74, %60
  %76 = fmul fast float %62, %55
  %77 = call float @dx.op.tertiary.f32(i32 46, float %56, float %63, float %76)  ; FMad(a,b,c)
  %78 = fadd fast float %77, %64
  %79 = fmul fast float %66, %55
  %80 = call float @dx.op.tertiary.f32(i32 46, float %56, float %67, float %79)  ; FMad(a,b,c)
  %81 = fadd fast float %80, %68
  %82 = fmul fast float %70, %55
  %83 = call float @dx.op.tertiary.f32(i32 46, float %56, float %71, float %82)  ; FMad(a,b,c)
  %84 = fadd fast float %83, %72
  %85 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %86 = extractvalue %dx.types.CBufRet.f32 %85, 0
  %87 = extractvalue %dx.types.CBufRet.f32 %85, 1
  %88 = extractvalue %dx.types.CBufRet.f32 %85, 2
  %89 = extractvalue %dx.types.CBufRet.f32 %85, 3
  %90 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %91 = extractvalue %dx.types.CBufRet.f32 %90, 0
  %92 = extractvalue %dx.types.CBufRet.f32 %90, 1
  %93 = extractvalue %dx.types.CBufRet.f32 %90, 2
  %94 = extractvalue %dx.types.CBufRet.f32 %90, 3
  %95 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %96 = extractvalue %dx.types.CBufRet.f32 %95, 0
  %97 = extractvalue %dx.types.CBufRet.f32 %95, 1
  %98 = extractvalue %dx.types.CBufRet.f32 %95, 2
  %99 = extractvalue %dx.types.CBufRet.f32 %95, 3
  %100 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %101 = extractvalue %dx.types.CBufRet.f32 %100, 0
  %102 = extractvalue %dx.types.CBufRet.f32 %100, 1
  %103 = extractvalue %dx.types.CBufRet.f32 %100, 2
  %104 = extractvalue %dx.types.CBufRet.f32 %100, 3
  %105 = fmul fast float %86, %75
  %106 = call float @dx.op.tertiary.f32(i32 46, float %78, float %87, float %105)  ; FMad(a,b,c)
  %107 = call float @dx.op.tertiary.f32(i32 46, float %81, float %88, float %106)  ; FMad(a,b,c)
  %108 = call float @dx.op.tertiary.f32(i32 46, float %84, float %89, float %107)  ; FMad(a,b,c)
  %109 = fmul fast float %91, %75
  %110 = call float @dx.op.tertiary.f32(i32 46, float %78, float %92, float %109)  ; FMad(a,b,c)
  %111 = call float @dx.op.tertiary.f32(i32 46, float %81, float %93, float %110)  ; FMad(a,b,c)
  %112 = call float @dx.op.tertiary.f32(i32 46, float %84, float %94, float %111)  ; FMad(a,b,c)
  %113 = fmul fast float %96, %75
  %114 = call float @dx.op.tertiary.f32(i32 46, float %78, float %97, float %113)  ; FMad(a,b,c)
  %115 = call float @dx.op.tertiary.f32(i32 46, float %81, float %98, float %114)  ; FMad(a,b,c)
  %116 = call float @dx.op.tertiary.f32(i32 46, float %84, float %99, float %115)  ; FMad(a,b,c)
  %117 = fmul fast float %101, %75
  %118 = call float @dx.op.tertiary.f32(i32 46, float %78, float %102, float %117)  ; FMad(a,b,c)
  %119 = call float @dx.op.tertiary.f32(i32 46, float %81, float %103, float %118)  ; FMad(a,b,c)
  %120 = call float @dx.op.tertiary.f32(i32 46, float %84, float %104, float %119)  ; FMad(a,b,c)
  %121 = getelementptr [4 x float], [4 x float]* %16, i32 0, i32 %3
  %122 = getelementptr [4 x float], [4 x float]* %17, i32 0, i32 %3
  %123 = load float, float* %121, align 4
  %124 = load float, float* %122, align 4
  %125 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %126 = extractvalue %dx.types.CBufRet.f32 %125, 2
  %127 = extractvalue %dx.types.CBufRet.f32 %125, 3
  %128 = fmul fast float %126, %123
  %129 = fmul fast float %127, %124
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %108)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %112)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %116)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %120)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %4)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %5)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %6)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %7)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %128)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %129)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @llvm.lifetime.end(i64 16, i8* %41) #0
  call void @llvm.lifetime.end(i64 16, i8* %42) #0
  call void @llvm.lifetime.end(i64 16, i8* %31) #0
  call void @llvm.lifetime.end(i64 16, i8* %32) #0
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #1

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromHeap(i32, i32, i1, i1) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #1

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #1

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #1

attributes #0 = { nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!7}
!dx.entryPoints = !{!8}

!0 = !{!"dxc(private) 1.8.0.4739 (d9a5e97d0)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 8}
!3 = !{!"vs", i32 6, i32 6}
!4 = !{null, null, !5, null}
!5 = !{!6}
!6 = !{i32 0, %pushConstants* undef, !"", i32 0, i32 0, i32 1, i32 32, null}
!7 = !{[23 x i32] [i32 21, i32 10, i32 15, i32 15, i32 0, i32 0, i32 15, i32 0, i32 0, i32 0, i32 15, i32 0, i32 0, i32 0, i32 256, i32 512, i32 256, i32 512, i32 16, i32 32, i32 64, i32 128, i32 783]}
!8 = !{void ()* @VSMain, !"VSMain", !9, !4, !25}
!9 = !{!10, !21, null}
!10 = !{!11, !14, !16, !17, !19, !20}
!11 = !{i32 0, !"POSITION", i8 9, i8 0, !12, i8 0, i32 1, i8 2, i32 0, i8 0, !13}
!12 = !{i32 0}
!13 = !{i32 3, i32 3}
!14 = !{i32 1, !"WIDTH", i8 9, i8 0, !12, i8 0, i32 1, i8 1, i32 1, i8 0, !15}
!15 = !{i32 3, i32 1}
!16 = !{i32 2, !"HEIGHT", i8 9, i8 0, !12, i8 0, i32 1, i8 1, i32 2, i8 0, !15}
!17 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !12, i8 0, i32 1, i8 4, i32 3, i8 0, !18}
!18 = !{i32 3, i32 15}
!19 = !{i32 4, !"COLOR", i8 9, i8 0, !12, i8 0, i32 1, i8 4, i32 4, i8 0, !18}
!20 = !{i32 5, !"SV_VertexID", i8 5, i8 1, !12, i8 0, i32 1, i8 1, i32 5, i8 0, !15}
!21 = !{!22, !23, !24}
!22 = !{i32 0, !"SV_Position", i8 9, i8 3, !12, i8 4, i32 1, i8 4, i32 0, i8 0, !18}
!23 = !{i32 1, !"COLOR", i8 9, i8 0, !12, i8 2, i32 1, i8 4, i32 1, i8 0, !18}
!24 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !12, i8 2, i32 1, i8 2, i32 2, i8 0, !13}
!25 = !{i32 0, i64 1073741824}

#endif

const unsigned char g_VS_InstancedScaledSprite[] = {
  0x44, 0x58, 0x42, 0x43, 0x3b, 0xb0, 0x07, 0x35, 0xfe, 0x77, 0x30, 0x57,
  0x54, 0x22, 0x0a, 0x34, 0x6e, 0x1b, 0xd5, 0x5f, 0x01, 0x00, 0x00, 0x00,
  0x70, 0x10, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
  0x48, 0x00, 0x00, 0x00, 0x4c, 0x01, 0x00, 0x00, 0xd8, 0x01, 0x00, 0x00,
  0x74, 0x03, 0x00, 0x00, 0x90, 0x03, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
  0x49, 0x53, 0x47, 0x31, 0xfc, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xd1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xd7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xde, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xe7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xed, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
  0x00, 0x57, 0x49, 0x44, 0x54, 0x48, 0x00, 0x48, 0x45, 0x49, 0x47, 0x48,
  0x54, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43,
  0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x53, 0x56, 0x5f, 0x56, 0x65, 0x72, 0x74,
  0x65, 0x78, 0x49, 0x44, 0x00, 0x00, 0x00, 0x00, 0x4f, 0x53, 0x47, 0x31,
  0x84, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7a, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x03, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00,
  0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f,
  0x52, 0x44, 0x00, 0x00, 0x50, 0x53, 0x56, 0x30, 0x94, 0x01, 0x00, 0x00,
  0x34, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x06, 0x03, 0x00, 0x06,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x18, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x50, 0x4f, 0x53,
  0x49, 0x54, 0x49, 0x4f, 0x4e, 0x00, 0x57, 0x49, 0x44, 0x54, 0x48, 0x00,
  0x48, 0x45, 0x49, 0x47, 0x48, 0x54, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f,
  0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x43, 0x4f,
  0x4c, 0x4f, 0x52, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44,
  0x00, 0x56, 0x53, 0x4d, 0x61, 0x69, 0x6e, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x42, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x41, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x02, 0x41, 0x00, 0x03, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x44, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x44, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x05, 0x41, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x44, 0x03, 0x03, 0x04, 0x00, 0x00,
  0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x44, 0x00,
  0x03, 0x02, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x02, 0x42, 0x00, 0x03, 0x02, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x80, 0x00, 0x00, 0x00, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48,
  0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7a, 0xd0, 0x99, 0xae,
  0xb5, 0xff, 0x2f, 0x98, 0xff, 0x32, 0x80, 0x50, 0x6e, 0xae, 0x96, 0x21,
  0x44, 0x58, 0x49, 0x4c, 0xd8, 0x0c, 0x00, 0x00, 0x66, 0x00, 0x01, 0x00,
  0x36, 0x03, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x06, 0x01, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0xc0, 0x0c, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde,
  0x21, 0x0c, 0x00, 0x00, 0x2d, 0x03, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91,
  0x41, 0xc8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c,
  0x25, 0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02,
  0x42, 0x92, 0x0b, 0x42, 0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b,
  0x0a, 0x32, 0x62, 0x88, 0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5,
  0x00, 0x19, 0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50,
  0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06,
  0x51, 0x18, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x1b, 0x88, 0x40, 0x00,
  0x96, 0x0d, 0x84, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20, 0x6d, 0x30,
  0x86, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x09, 0xa0, 0x36, 0x18, 0xc4,
  0xff, 0xff, 0xff, 0xff, 0x0f, 0x80, 0x04, 0x54, 0x00, 0x00, 0x00, 0x00,
  0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x84, 0x40, 0x98,
  0x10, 0x0c, 0x13, 0x02, 0x61, 0x42, 0x40, 0x00, 0x89, 0x20, 0x00, 0x00,
  0x41, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04,
  0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14,
  0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c, 0x10, 0xa8, 0xc1, 0x08,
  0xc0, 0x1c, 0x01, 0x28, 0xcc, 0x11, 0x20, 0x24, 0x94, 0x01, 0x08, 0x06,
  0x22, 0x4a, 0x00, 0x90, 0x31, 0x03, 0x30, 0x47, 0x00, 0x06, 0xc5, 0x40,
  0x92, 0x24, 0x11, 0x12, 0x52, 0x8a, 0x91, 0x24, 0x49, 0x22, 0x24, 0xc4,
  0x14, 0x03, 0x48, 0x92, 0x44, 0x40, 0xc8, 0xb9, 0x67, 0xb8, 0xfc, 0x09,
  0x7b, 0x08, 0xc9, 0x0f, 0x81, 0x66, 0x58, 0x08, 0x14, 0x0c, 0x73, 0x04,
  0x41, 0x29, 0xa0, 0x24, 0x89, 0x22, 0x92, 0x8e, 0x1a, 0x2e, 0x7f, 0xc2,
  0x1e, 0x42, 0xf2, 0xb9, 0x8d, 0x2a, 0x56, 0x62, 0xf2, 0x8b, 0xdb, 0x46,
  0x04, 0x82, 0x20, 0x48, 0x21, 0xa8, 0x04, 0x4a, 0xa8, 0x3a, 0x6a, 0xb8,
  0xfc, 0x09, 0x7b, 0x08, 0xc9, 0xe7, 0x36, 0xaa, 0x58, 0x89, 0xc9, 0x47,
  0x6e, 0x1b, 0x11, 0x49, 0x92, 0x24, 0x85, 0xb8, 0x12, 0x28, 0x21, 0xac,
  0x14, 0x48, 0x82, 0x20, 0x08, 0x69, 0xb7, 0x0d, 0x97, 0x3f, 0x61, 0x0f,
  0x21, 0xf9, 0x2b, 0x21, 0x39, 0x54, 0x24, 0x10, 0x69, 0xe4, 0x3c, 0x44,
  0x34, 0x21, 0x84, 0x84, 0x84, 0x24, 0x29, 0x04, 0x94, 0x40, 0x1c, 0x75,
  0x07, 0x0d, 0x97, 0x3f, 0x61, 0x0f, 0x21, 0xf9, 0x2b, 0x21, 0x6d, 0x48,
  0x33, 0x20, 0x22, 0x49, 0x12, 0xa1, 0x14, 0x50, 0xf2, 0x25, 0x11, 0x81,
  0x03, 0x01, 0x47, 0x49, 0x53, 0x44, 0x09, 0x93, 0x9f, 0x52, 0xd2, 0xc1,
  0x39, 0x8d, 0x34, 0x01, 0xcd, 0x24, 0x21, 0x24, 0x49, 0x92, 0x24, 0x49,
  0x92, 0xe4, 0x9a, 0x87, 0x92, 0x0e, 0xce, 0x69, 0xa4, 0x09, 0x68, 0x26,
  0x09, 0x05, 0x23, 0x91, 0x79, 0x91, 0x24, 0x01, 0x42, 0x27, 0x21, 0x00,
  0x13, 0x14, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79,
  0x68, 0x03, 0x72, 0xc0, 0x87, 0x0d, 0xaf, 0x50, 0x0e, 0x6d, 0xd0, 0x0e,
  0x7a, 0x50, 0x0e, 0x6d, 0x00, 0x0f, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07,
  0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0xa0, 0x07, 0x73, 0x20, 0x07,
  0x6d, 0x90, 0x0e, 0x78, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e,
  0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x30, 0x07,
  0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x76, 0x40, 0x07,
  0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xe6, 0x10, 0x07, 0x76, 0xa0, 0x07,
  0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07,
  0x72, 0xd0, 0x06, 0xe6, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07,
  0x6d, 0xe0, 0x0e, 0x78, 0xa0, 0x07, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07,
  0x72, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x43, 0x1e, 0x02, 0x08, 0x80, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x04, 0x10, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0x0c, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xf2, 0x28,
  0x40, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe4,
  0x61, 0x80, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
  0xc8, 0xe3, 0x00, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xc0, 0x90, 0x47, 0x02, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x80, 0x21, 0x4f, 0x05, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x43, 0x1e, 0x0c, 0x08, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x1a, 0x10, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0x3a, 0x20, 0x00, 0x04, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xf2, 0x80, 0x01, 0x10, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x81, 0x00, 0x00,
  0x15, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x18, 0x19, 0x11, 0x4c, 0x90,
  0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x0a, 0x0a, 0x10, 0x10, 0x10,
  0x10, 0x81, 0x84, 0x92, 0x18, 0x01, 0x28, 0x82, 0x12, 0x28, 0x84, 0x52,
  0x28, 0x03, 0x4a, 0x4a, 0xa0, 0x18, 0x0a, 0x62, 0x04, 0xa0, 0x80, 0xca,
  0xa0, 0x08, 0xca, 0xa3, 0x10, 0x4a, 0x81, 0xca, 0x19, 0x00, 0x32, 0xc7,
  0xba, 0x2a, 0xe5, 0x79, 0x00, 0xe0, 0x01, 0x00, 0xe0, 0x01, 0x00, 0x00,
  0x44, 0x40, 0x08, 0x44, 0x40, 0x08, 0x02, 0x03, 0x50, 0x00, 0x89, 0x17,
  0x03, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x7b, 0x00, 0x00, 0x00,
  0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0xc4, 0x31, 0x20, 0xc3, 0x1b,
  0x43, 0x81, 0x93, 0x4b, 0xb3, 0x0b, 0xa3, 0x2b, 0x4b, 0x01, 0x89, 0x71,
  0xc1, 0x71, 0x81, 0x71, 0xa1, 0xb9, 0x99, 0xc9, 0x01, 0x41, 0x21, 0xcb,
  0x09, 0xab, 0x29, 0xcb, 0xb9, 0x21, 0x83, 0x49, 0xd9, 0x10, 0x04, 0x13,
  0x84, 0x84, 0x9a, 0x20, 0x24, 0xd5, 0x06, 0x61, 0x20, 0x26, 0x08, 0x89,
  0xb5, 0x41, 0x18, 0x0c, 0x0a, 0x76, 0x73, 0x1b, 0x06, 0x84, 0x20, 0x26,
  0x08, 0xc9, 0x35, 0x41, 0x28, 0x03, 0x8f, 0xc0, 0x04, 0x21, 0xc1, 0x36,
  0x20, 0xca, 0xc2, 0x28, 0xca, 0xd0, 0x00, 0x1b, 0x02, 0x67, 0x03, 0x01,
  0x00, 0x0f, 0x30, 0x41, 0x30, 0x83, 0x6f, 0x43, 0x10, 0x4d, 0x10, 0x0e,
  0x81, 0x86, 0xd5, 0x54, 0x53, 0x58, 0x9a, 0x1b, 0x11, 0xa8, 0xa7, 0xa9,
  0x24, 0xaa, 0xa4, 0x27, 0xa7, 0x09, 0x82, 0xd0, 0x4c, 0x10, 0x04, 0x67,
  0x43, 0xa0, 0x4c, 0x10, 0x84, 0x67, 0x82, 0x90, 0x64, 0x1b, 0x04, 0x4d,
  0xdb, 0xb0, 0x28, 0x95, 0x75, 0x61, 0xd7, 0x90, 0x29, 0xd7, 0xc6, 0xe2,
  0x2a, 0x89, 0x88, 0x0a, 0x69, 0x82, 0x20, 0x40, 0x1b, 0x04, 0x6d, 0xd8,
  0xb0, 0x0c, 0x9d, 0x75, 0x61, 0xd7, 0xe0, 0x0d, 0xd7, 0x37, 0x41, 0x48,
  0x34, 0x1a, 0x48, 0x45, 0x49, 0x47, 0x48, 0x54, 0x1b, 0x96, 0x30, 0x10,
  0x03, 0xeb, 0xc2, 0xae, 0xc1, 0x0b, 0x83, 0xeb, 0x23, 0x42, 0x55, 0x84,
  0x35, 0xf4, 0xf4, 0x24, 0x45, 0x34, 0x41, 0x10, 0xa2, 0x09, 0x42, 0xb2,
  0x6d, 0x10, 0x34, 0x33, 0xd8, 0xb0, 0x68, 0x64, 0x60, 0x5d, 0xd8, 0x35,
  0x94, 0x81, 0x76, 0x9d, 0xc1, 0x04, 0x21, 0xe1, 0x58, 0x0c, 0x3d, 0x31,
  0x3d, 0x49, 0x6d, 0x58, 0xd2, 0x40, 0x0d, 0xac, 0x0b, 0xbb, 0x86, 0x32,
  0x48, 0x83, 0xeb, 0x0c, 0x26, 0x08, 0x49, 0xc7, 0x65, 0xca, 0xea, 0xcb,
  0xaa, 0x4c, 0x8e, 0xae, 0x0c, 0x2f, 0x89, 0x68, 0x82, 0x20, 0x48, 0x1b,
  0x16, 0x36, 0x68, 0x03, 0x37, 0xf0, 0xb0, 0x6b, 0xf0, 0xd8, 0xe0, 0xfa,
  0x36, 0x18, 0x1c, 0x18, 0x8c, 0x01, 0x1a, 0xac, 0xc1, 0x1b, 0x70, 0x99,
  0xb2, 0xfa, 0x82, 0x7a, 0x9b, 0x4b, 0xa3, 0x4b, 0x7b, 0x73, 0x9b, 0x20,
  0x08, 0xd3, 0x86, 0x45, 0x89, 0x03, 0x4b, 0x0e, 0xb0, 0x32, 0x18, 0xca,
  0x40, 0xb9, 0xce, 0x60, 0xc3, 0x32, 0xa8, 0x81, 0x75, 0x61, 0xd9, 0x50,
  0x06, 0xc3, 0x75, 0x06, 0x1b, 0x96, 0x30, 0x20, 0x03, 0xeb, 0xc2, 0xb2,
  0x21, 0x0b, 0x83, 0x6b, 0xdb, 0x30, 0xcc, 0x01, 0x1d, 0xd4, 0xc1, 0x86,
  0x01, 0x0e, 0xec, 0x00, 0x98, 0x20, 0x04, 0xcc, 0x06, 0x41, 0xc1, 0x83,
  0x0d, 0xc5, 0x44, 0xdd, 0x01, 0x94, 0x07, 0x55, 0xd8, 0xd8, 0xec, 0xda,
  0x5c, 0xd2, 0xc8, 0xca, 0xdc, 0xe8, 0xa6, 0x04, 0x41, 0x15, 0x32, 0x3c,
  0x17, 0xbb, 0x32, 0xb9, 0xb9, 0xb4, 0x37, 0xb7, 0x29, 0x01, 0xd1, 0x84,
  0x0c, 0xcf, 0xc5, 0x2e, 0x8c, 0xcd, 0xae, 0x4c, 0x6e, 0x4a, 0x60, 0xd4,
  0x21, 0xc3, 0x73, 0x99, 0x43, 0x0b, 0x23, 0x2b, 0x93, 0x6b, 0x7a, 0x23,
  0x2b, 0x63, 0x9b, 0x12, 0x20, 0x65, 0xc8, 0xf0, 0x5c, 0xe4, 0xca, 0xe6,
  0xde, 0xea, 0xe4, 0xc6, 0xca, 0xe6, 0xa6, 0x04, 0x4f, 0x1d, 0x32, 0x3c,
  0x17, 0xbb, 0xb4, 0xb2, 0xbb, 0x24, 0xb2, 0x29, 0xba, 0x30, 0xba, 0xb2,
  0x29, 0x41, 0x54, 0x87, 0x0c, 0xcf, 0xa5, 0xcc, 0x8d, 0x4e, 0x2e, 0x0f,
  0xea, 0x2d, 0xcd, 0x8d, 0x6e, 0x6e, 0x4a, 0x90, 0x07, 0x00, 0x00, 0x00,
  0x79, 0x18, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c,
  0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3,
  0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6,
  0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e,
  0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43,
  0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03,
  0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48,
  0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20,
  0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e,
  0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d,
  0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89,
  0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83,
  0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68,
  0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90,
  0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78,
  0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98,
  0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5,
  0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c,
  0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c,
  0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43,
  0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43,
  0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82,
  0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc4, 0x21, 0x07, 0x7c, 0x70,
  0x03, 0x7a, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19, 0xd1, 0x43, 0x0e, 0xf8,
  0xe0, 0x06, 0xe4, 0x20, 0x0e, 0xe7, 0xe0, 0x06, 0xf6, 0x10, 0x0e, 0xf2,
  0xc0, 0x0e, 0xe1, 0x90, 0x0f, 0xef, 0x50, 0x0f, 0xf4, 0x00, 0x00, 0x00,
  0x71, 0x20, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x26, 0x60, 0xbc, 0xac,
  0x09, 0x20, 0x8d, 0x29, 0x50, 0xc3, 0xe5, 0x3b, 0x8f, 0x0f, 0x34, 0x8d,
  0x33, 0x01, 0x13, 0x11, 0x02, 0xcd, 0xb0, 0x10, 0x76, 0xb0, 0x0d, 0x97,
  0xef, 0x3c, 0xbe, 0x10, 0x50, 0x45, 0x41, 0x44, 0xa5, 0x03, 0x0c, 0x25,
  0x61, 0x00, 0x02, 0xe6, 0x17, 0xb7, 0x6d, 0x08, 0xdb, 0x70, 0xf9, 0xce,
  0xe3, 0x0b, 0x01, 0x55, 0x14, 0x44, 0x54, 0x3a, 0xc0, 0x50, 0x12, 0x06,
  0x20, 0x60, 0x3e, 0x72, 0xdb, 0xb6, 0xd0, 0x0d, 0x97, 0xef, 0x3c, 0xbe,
  0x10, 0x11, 0xc0, 0x44, 0x84, 0x40, 0x33, 0x2c, 0xc4, 0x17, 0x39, 0xcc,
  0x86, 0x34, 0x03, 0xd2, 0x18, 0x66, 0xa0, 0x0d, 0x97, 0xef, 0x3c, 0xbe,
  0x10, 0x11, 0xc0, 0x44, 0x84, 0x40, 0x33, 0x2c, 0xc4, 0x17, 0x39, 0x4c,
  0x48, 0x00, 0x8f, 0x0d, 0x4c, 0xc3, 0xe5, 0x3b, 0x8f, 0xbf, 0x38, 0xc0,
  0x20, 0x36, 0x0f, 0x35, 0xf9, 0xc5, 0x6d, 0x1b, 0xc1, 0x34, 0x5c, 0xbe,
  0xf3, 0xf8, 0x8b, 0x03, 0x0c, 0x62, 0xf3, 0x50, 0x93, 0x8f, 0xdc, 0xb6,
  0x15, 0x54, 0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x4d, 0x4e, 0x44, 0xa0, 0xd4,
  0xf4, 0x50, 0x93, 0x5f, 0xdc, 0xb6, 0x25, 0x48, 0xc3, 0xe5, 0x3b, 0x8f,
  0x3f, 0x11, 0xd1, 0x84, 0x00, 0x11, 0xe6, 0x17, 0xb7, 0x6d, 0x01, 0xd1,
  0xb2, 0x54, 0x8c, 0xbf, 0x20, 0x05, 0x31, 0x21, 0x0c, 0xe1, 0x13, 0xcd,
  0x60, 0x00, 0xd3, 0xb2, 0x54, 0x8c, 0xbf, 0x20, 0x05, 0x31, 0x21, 0x0c,
  0xe1, 0x4b, 0x13, 0x10, 0x4d, 0x00, 0x00, 0x00, 0x61, 0x20, 0x00, 0x00,
  0x5c, 0x01, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2c, 0x10, 0x00, 0x00, 0x00,
  0x0d, 0x00, 0x00, 0x00, 0x14, 0x14, 0x08, 0x45, 0x23, 0x00, 0x94, 0x14,
  0xd7, 0x0c, 0x40, 0xd9, 0x15, 0xec, 0x40, 0x69, 0x14, 0xed, 0x40, 0xc9,
  0x0e, 0x14, 0x60, 0x40, 0xa1, 0x10, 0x32, 0x02, 0x40, 0xdc, 0x1c, 0x82,
  0x19, 0xa4, 0xc1, 0x1c, 0x82, 0x19, 0x60, 0x73, 0x08, 0x66, 0xa0, 0x06,
  0xf4, 0xcd, 0x41, 0x5c, 0xd7, 0xf5, 0x00, 0x00, 0x23, 0x06, 0x08, 0x00,
  0x82, 0x60, 0x00, 0x06, 0x65, 0x80, 0x04, 0xd9, 0x33, 0x62, 0x70, 0x00,
  0x20, 0x08, 0x06, 0xdd, 0x19, 0x30, 0x01, 0x31, 0x62, 0x90, 0x00, 0x20,
  0x08, 0x06, 0x8c, 0x1b, 0x58, 0xd5, 0x46, 0x06, 0xcf, 0x88, 0x41, 0x02,
  0x80, 0x20, 0x18, 0x28, 0x70, 0x70, 0x5d, 0x5c, 0x19, 0x40, 0x23, 0x06,
  0x09, 0x00, 0x82, 0x60, 0xa0, 0xc4, 0x01, 0x86, 0x75, 0x64, 0x10, 0x8d,
  0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0x22, 0x07, 0x59, 0xe6, 0x99, 0x81,
  0x34, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0xca, 0x1c, 0x68, 0xda, 0x37,
  0x06, 0xd3, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x28, 0x74, 0xb0, 0x79,
  0x60, 0x90, 0x06, 0xd4, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x28, 0x75,
  0xc0, 0x7d, 0x61, 0x80, 0x06, 0xd5, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18,
  0x28, 0x76, 0xd0, 0x81, 0x81, 0x18, 0xa8, 0x81, 0x35, 0x62, 0x90, 0x00,
  0x20, 0x08, 0x06, 0xca, 0x1d, 0x78, 0x61, 0x30, 0x06, 0x67, 0x70, 0x8d,
  0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0x82, 0x07, 0x5f, 0x18, 0x90, 0x41,
  0x1b, 0x60, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0xa0, 0xe4, 0x01, 0x18,
  0xa0, 0x41, 0x19, 0xb8, 0x41, 0x36, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06,
  0x8a, 0x1e, 0x84, 0x81, 0x19, 0x98, 0xc1, 0x1b, 0x68, 0x23, 0x06, 0x09,
  0x00, 0x82, 0x60, 0xa0, 0xec, 0x81, 0x18, 0x9c, 0xc1, 0x19, 0xb8, 0xc1,
  0x36, 0x13, 0x71, 0x06, 0x09, 0x35, 0x0a, 0x33, 0x11, 0x67, 0x90, 0x50,
  0xa3, 0x30, 0x13, 0x71, 0x06, 0x09, 0x35, 0x0a, 0x33, 0x11, 0x67, 0x90,
  0x50, 0xa3, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0xd8, 0x1e, 0x7c,
  0x12, 0x1b, 0x8c, 0x26, 0x04, 0xc3, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18,
  0x48, 0x7f, 0xe0, 0x05, 0x64, 0x40, 0x06, 0x23, 0x06, 0x07, 0x00, 0x82,
  0x60, 0xd0, 0xf1, 0x41, 0x18, 0x04, 0xda, 0x88, 0xc1, 0x01, 0x80, 0x20,
  0x18, 0x60, 0x7f, 0x30, 0x06, 0xd6, 0x1c, 0x8c, 0x26, 0x04, 0xc0, 0x88,
  0x01, 0x02, 0x80, 0x20, 0x18, 0x48, 0xa3, 0x20, 0x06, 0x01, 0x1a, 0xa0,
  0xc1, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x74, 0xa0, 0x50, 0x06, 0x81,
  0x37, 0x9a, 0x40, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x20, 0x99,
  0x42, 0x19, 0x04, 0x6b, 0xb0, 0x06, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60,
  0xd0, 0x8d, 0x02, 0x1a, 0x04, 0xdf, 0x35, 0xc3, 0x8e, 0x18, 0x18, 0x03,
  0x08, 0x82, 0x01, 0xf1, 0x0a, 0x6f, 0x10, 0x5c, 0x33, 0xec, 0x88, 0x81,
  0x31, 0x80, 0x20, 0x18, 0x10, 0xb0, 0x00, 0x07, 0xc1, 0x3a, 0x87, 0x27,
  0x0f, 0xf2, 0x60, 0x9d, 0xc3, 0xa3, 0x07, 0x7a, 0x30, 0x6c, 0x40, 0x08,
  0x67, 0x30, 0x00, 0xc3, 0x06, 0x44, 0x70, 0x06, 0x03, 0xb0, 0xce, 0x21,
  0xda, 0x03, 0x3f, 0x58, 0xe7, 0x10, 0xf1, 0xc1, 0x1f, 0x0c, 0x1b, 0x10,
  0x02, 0x36, 0x00, 0xc3, 0x06, 0x44, 0x90, 0x06, 0x03, 0xb0, 0xce, 0x61,
  0xea, 0x03, 0x3d, 0x58, 0xe7, 0x30, 0xf9, 0xc1, 0x1e, 0x0c, 0x1b, 0x10,
  0xc2, 0x1a, 0x0c, 0xc0, 0xb0, 0x01, 0x11, 0x6c, 0x03, 0xb0, 0xce, 0xa1,
  0xfa, 0x83, 0x3e, 0x58, 0xe7, 0x50, 0x81, 0x82, 0x1f, 0x0c, 0x1b, 0x10,
  0x02, 0x37, 0x00, 0xc3, 0x06, 0x44, 0xd0, 0x0d, 0xc0, 0x65, 0xc3, 0x8e,
  0x18, 0x18, 0x03, 0x08, 0x82, 0x01, 0x91, 0x0b, 0x79, 0x10, 0x5c, 0x36,
  0xec, 0x88, 0x81, 0x31, 0x80, 0x20, 0x18, 0x10, 0xba, 0xa0, 0x07, 0xc1,
  0x3a, 0x87, 0x6d, 0x14, 0x46, 0x61, 0x9d, 0xc3, 0x46, 0x0a, 0xa4, 0x30,
  0x6c, 0x40, 0x08, 0x65, 0x30, 0x00, 0xc3, 0x06, 0x44, 0x40, 0x06, 0x03,
  0xb0, 0xce, 0xa1, 0x2b, 0x05, 0x54, 0x58, 0xe7, 0xd0, 0x99, 0x42, 0x2a,
  0x0c, 0x1b, 0x10, 0x42, 0x19, 0x0c, 0xc0, 0xb0, 0x01, 0x11, 0x98, 0xc1,
  0x00, 0xac, 0x73, 0xf8, 0x4e, 0x81, 0x14, 0xd6, 0x39, 0x7c, 0xa8, 0x50,
  0x0a, 0xc3, 0x06, 0x84, 0x90, 0x06, 0x03, 0x30, 0x6c, 0x40, 0x04, 0x66,
  0x30, 0x00, 0xeb, 0x1c, 0xc2, 0x20, 0x15, 0x4e, 0x61, 0x9d, 0x43, 0x18,
  0xa8, 0x02, 0x2a, 0x0c, 0x1b, 0x10, 0x42, 0x1a, 0x0c, 0xc0, 0xb0, 0x01,
  0x11, 0xa0, 0xc1, 0x00, 0xac, 0x73, 0x08, 0x83, 0x55, 0x80, 0x83, 0x75,
  0x0e, 0x61, 0xc0, 0x0a, 0x71, 0x40, 0x02, 0x32, 0x48, 0x40, 0x86, 0x09,
  0x69, 0x00, 0x1f, 0x13, 0xd2, 0x00, 0x3e, 0x23, 0x06, 0x07, 0x00, 0x82,
  0x60, 0x50, 0x85, 0x03, 0x29, 0x88, 0x41, 0x2c, 0x8c, 0x26, 0x04, 0xc0,
  0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc3, 0x88, 0xc1, 0x01, 0x80, 0x20,
  0x18, 0x54, 0xe5, 0x80, 0x0a, 0x66, 0x80, 0x0b, 0xa3, 0x09, 0x01, 0x30,
  0x9a, 0x20, 0x04, 0xa3, 0x09, 0xc3, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08,
  0x06, 0x55, 0x3a, 0xb0, 0x82, 0x1a, 0xd8, 0xc2, 0x68, 0x42, 0x00, 0x8c,
  0x26, 0x08, 0xc1, 0x68, 0xc2, 0x30, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82,
  0x41, 0xd5, 0x0e, 0xb0, 0xe0, 0x06, 0xbb, 0x30, 0x9a, 0x10, 0x00, 0xa3,
  0x09, 0x42, 0x30, 0x9a, 0x30, 0x0c, 0xf6, 0x48, 0xf2, 0x19, 0x31, 0x40,
  0x00, 0x10, 0x04, 0x03, 0x0d, 0x1e, 0x6e, 0x41, 0x7a, 0x02, 0x0b, 0x1e,
  0xe8, 0x98, 0x53, 0xc9, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xb4,
  0x79, 0xd0, 0x85, 0xca, 0x09, 0x2c, 0x70, 0xa0, 0x63, 0x0d, 0x26, 0x9f,
  0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xd0, 0xec, 0xa1, 0x17, 0xb0, 0x26,
  0xb0, 0xa0, 0x81, 0x8e, 0x31, 0x9b, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04,
  0xc1, 0x40, 0xcb, 0x07, 0x70, 0xd8, 0x98, 0xc0, 0x02, 0x06, 0x3a, 0x23,
  0x06, 0x07, 0x00, 0x82, 0x60, 0x50, 0xf5, 0x03, 0x38, 0xe8, 0x41, 0x3b,
  0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2, 0x68,
  0x02, 0x31, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x41, 0x25, 0x12, 0xe5,
  0xf0, 0x07, 0xf5, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a,
  0x30, 0x08, 0xa3, 0x09, 0xc4, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06,
  0xd5, 0x49, 0xa8, 0x03, 0x29, 0xd0, 0xc3, 0x68, 0x42, 0x00, 0x8c, 0x26,
  0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c, 0x26, 0x10, 0xc3, 0x88, 0xc1, 0x01,
  0x80, 0x20, 0x18, 0x54, 0x2c, 0xf1, 0x0e, 0xa9, 0xa0, 0x0f, 0xa3, 0x09,
  0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x30, 0x9a, 0x40, 0x0c,
  0x36, 0x79, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x03, 0x0d, 0x26,
  0xee, 0x81, 0x9b, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xd0, 0x62,
  0x02, 0x1f, 0xb4, 0x29, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x03, 0x4d,
  0x26, 0xf2, 0x01, 0x9b, 0x02, 0x93, 0xc4, 0x40, 0x3e, 0x23, 0x06, 0x08,
  0x00, 0x82, 0x60, 0xa0, 0xd1, 0xc4, 0x3e, 0x80, 0x81, 0x14, 0x8c, 0x18,
  0x20, 0x00, 0x08, 0x82, 0x81, 0x56, 0x13, 0xfc, 0xe0, 0x49, 0xc1, 0x88,
  0x01, 0x02, 0x80, 0x20, 0x18, 0x68, 0x36, 0xd1, 0x0f, 0x9c, 0x14, 0x58,
  0x64, 0x06, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x03, 0x0d, 0x27,
  0xfe, 0x81, 0x0c, 0xa2, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xb4,
  0x9c, 0x00, 0x09, 0x31, 0x88, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30,
  0xd0, 0x74, 0x22, 0x24, 0xc0, 0x20, 0x0a, 0x0c, 0x52, 0x03, 0xf9, 0x8c,
  0x18, 0x20, 0x00, 0x08, 0x82, 0x81, 0xc6, 0x13, 0x23, 0x81, 0x06, 0x50,
  0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x5a, 0x4f, 0x90, 0x84, 0x19,
  0x40, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x68, 0x3e, 0x51, 0x12,
  0x64, 0x00, 0x05, 0xeb, 0x1c, 0xd2, 0x21, 0x26, 0xec, 0x61, 0x9d, 0x43,
  0x3a, 0xc8, 0xc4, 0x3d, 0x90, 0x80, 0x0c, 0x12, 0x90, 0x31, 0x62, 0x70,
  0x00, 0x20, 0x08, 0x06, 0x55, 0x59, 0xa0, 0xc4, 0x2f, 0xd4, 0xc4, 0x68,
  0x42, 0x20, 0x8c, 0x26, 0x08, 0x83, 0x09, 0x85, 0x7c, 0x4c, 0x28, 0xe4,
  0x33, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x0e, 0x5b, 0xd0, 0x84, 0x4e,
  0xe8, 0xc4, 0x58, 0x58, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0xe0, 0xb0,
  0x05, 0x4d, 0xe8, 0x84, 0x4e, 0x84, 0x85, 0x34, 0x62, 0x90, 0x00, 0x20,
  0x08, 0x06, 0x0e, 0x5b, 0xd0, 0x84, 0x4e, 0xe8, 0x84, 0x58, 0x38, 0x23,
  0x06, 0x09, 0x00, 0x82, 0x60, 0xe0, 0xb0, 0x05, 0x4d, 0xe8, 0x84, 0x4e,
  0xf8, 0x84, 0x32, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x0e, 0x5b, 0xd0,
  0x44, 0x4f, 0xe8, 0xc4, 0x58, 0xf8, 0xc3, 0x88, 0x41, 0x02, 0x80, 0x20,
  0x18, 0x38, 0x6c, 0x41, 0x13, 0x3d, 0xa1, 0x13, 0x61, 0xd1, 0x0f, 0x23,
  0x06, 0x09, 0x00, 0x82, 0x60, 0xe0, 0xb0, 0x05, 0x4d, 0xf4, 0x84, 0x4e,
  0x88, 0x05, 0x3f, 0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0xc3, 0x16,
  0x34, 0xd1, 0x13, 0x3a, 0xe1, 0x13, 0xfb, 0x30, 0x62, 0x90, 0x00, 0x20,
  0x08, 0x06, 0x0e, 0x5b, 0xd0, 0xc4, 0x4d, 0xe8, 0xc4, 0x58, 0x08, 0x23,
  0x06, 0x09, 0x00, 0x82, 0x60, 0xe0, 0xb0, 0x05, 0x4d, 0xdc, 0x84, 0x4e,
  0x84, 0x45, 0x30, 0x62, 0x60, 0x0c, 0x20, 0x08, 0x06, 0x04, 0x5c, 0xc4,
  0x44, 0x2e, 0x8c, 0x18, 0x18, 0x03, 0x08, 0x82, 0x01, 0x01, 0x17, 0x31,
  0x81, 0x0b, 0x23, 0x06, 0xc6, 0x00, 0x82, 0x60, 0x40, 0xc0, 0x45, 0x4c,
  0x8c, 0xc3, 0x88, 0x81, 0x31, 0x80, 0x20, 0x18, 0x10, 0x70, 0x11, 0x13,
  0xe2, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

#endif
